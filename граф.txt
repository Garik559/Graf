using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Numerics;
using System.Reflection.PortableExecutable;

namespace Graf
{
    class Program
    {

        class Graf
        {
            private Dictionary<int, Dictionary<int, int?>> adjacencyList = new();
            private bool Orient, Weight;

            // конструтор по умолчанию
            public Graf()
            {
                Orient = false;
                Weight = false;
                adjacencyList = new Dictionary<int, Dictionary<int, int?>>();
            }

            // конструктор
            public Graf(string path)
            {
                string[] st = File.ReadAllLines(path);
                Orient = bool.Parse(st[0].Split("; ")[0]);
                Weight = bool.Parse(st[0].Split("; ")[1]);

                for (int i = 1; i < st.Length; i++)
                {
                    AddVert(int.Parse(st[i].Split(':')[0]));
                }

                for (int i = 1; i < st.Length; i++)
                {
                    for (int j = 0; j < (st[i].Split(": ").Count() > 1 ? (st[i].Split(": ")[1].Split("; ")).Count() : 0); j++)
                    {
                        AddEdge((int.Parse(st[i].Split(": ")[0])), int.Parse(st[i].Split(": ")[1].Split("; ")[j].Split(" ")[0]), int.Parse(st[i].Split(": ")[1].Split("; ")[j].Split(" ")[1]));
                    }

                }
            }

            // конструктор копирования
            public Graf(Graf graf)
            {
                Orient = graf.Orient;
                Weight = graf.Weight;
                adjacencyList = new Dictionary<int, Dictionary<int, int?>>(graf.adjacencyList);
                foreach (var i in adjacencyList.Keys)
                {
                    adjacencyList[i] = new Dictionary<int, int?>(graf.adjacencyList[i]);
                }

            }

            // добавление вершины
            public void AddVert(int u)
            {
                if (!adjacencyList.ContainsKey(u))
                {
                    adjacencyList.Add(u, new Dictionary<int, int?>());
                }
                else
                {
                    Console.WriteLine("Данная вершина существует");
                }

            }

            // сохранение графа в файл
            public void SaveGraf(string path)
            {
                string res = "";
               // using (StreamWriter writer = new StreamWriter(path, false))
                //{
                    if (Weight)
                    {
                    //    writer.Write(Orient.ToString() + "; ");
                    //    writer.WriteLine(Weight.ToString());
                    //    foreach (var k in adjacencyList.Keys)
                    //    {
                    //        writer.Write(k + ": ");
                    //        foreach (var k1 in adjacencyList[k])
                    //        {
                    //            writer.Write(k1.Key + " " + k1.Value + "; ");
                    //        }
                    //        writer.WriteLine();
                    //    }
                    }
                    else
                    {
                        res += Orient.ToString()+"; " ;//writer.Write(Orient.ToString() + "; ");
                        res += Weight.ToString() + "\n"; //writer.WriteLine(Weight.ToString());
                        var listPair = adjacencyList.Last();
                        foreach (var k in adjacencyList.Keys)
                        {
                            res += k + ":";//writer.Write(k + ": ");
                            foreach (var k1 in adjacencyList[k])
                            {
                                var lastPair2 = adjacencyList[k].Last();
                                if ((k1.Key == lastPair2.Key) && (k1.Value == lastPair2.Value))
                                {
                                res += " " + k1.Key + " " + 0; //writer.Write(k1.Key + " " + 0);
                                }
                                else
                                {
                                res += " " + k1.Key + " " + 0 + ";"; //writer.Write(k1.Key + " " + 0 + "; ");
                                }
                            }
                            if (k != listPair.Key)
                            {
                                res += "\n";
                            }

                        //writer.WriteLine();
                        }
                        File.WriteAllText(path, res);
                }
                    

//                }
                //using(StreamReader reader = new StreamReader(path))
                //{
                //    string? line;
                //    while ((line = reader.ReadLine()) != null)
                //    {
                //        line = line.TrimEnd("; ");
                //        Console.WriteLine(line);
                //    }
                //}
                
            }


            // добавление ребра 
            public bool AddEdge(int u, int v, int? w)
            {
                if (adjacencyList.ContainsKey(u) && adjacencyList.ContainsKey(v))
                {
                    if (Weight)
                    {
                        if (w == 0)
                        {
                            Console.WriteLine("Вес должен иметь значение");
                        }
                        else
                        {
                            if (!Orient)
                            {
                                adjacencyList[u][v] = w;
                                return true;
                            }
                            else
                            {
                                adjacencyList[u][v] = w;
                                adjacencyList[v][u] = w;
                                return true;
                            }
                        }

                    }
                    else
                    {
                        if (w != 0)
                        {
                            Console.WriteLine("Граф невзвешенный. Вес не нужен");
                        }
                        else
                        {
                            if (!Orient)
                            {
                                adjacencyList[u][v] = null;
                                return true;
                            }
                            else
                            {
                                adjacencyList[u][v] = null;
                                adjacencyList[v][u] = null;
                                return true;
                            }
                        }

                    }

                }
                else
                {
                    Console.WriteLine("Не возможно добавить ребро к несуществующим вершинам");
                }
                return false;
            }

            //удаление ребра
            public void RemoveEgde(int u, int v)
            {
                if (adjacencyList.ContainsKey(u) && adjacencyList.ContainsKey(v))
                {
                    if (!Orient)
                    {
                        adjacencyList[u].Remove(v);
                    }
                    else
                    {
                        adjacencyList[u].Remove(v);
                        adjacencyList[v].Remove(u);
                    }

                }
                else
                {
                    Console.WriteLine("Не возможно удалить несуществующие ребро");
                }
            }

            //удаление вершины
            public void RemoveVertix(int u)
            {
                if (adjacencyList.ContainsKey(u))
                {
                    adjacencyList.Remove(u);
                    foreach (var v in adjacencyList)
                    {
                        foreach (var v2 in v.Value)
                        {
                            if (v2.Key == u)
                            {
                                adjacencyList[v.Key].Remove(v2.Key);
                            }

                        }
                    }
                }
                else
                {
                    Console.WriteLine("Не возможно удалить не существующую вершину");
                }

            }

            public void PrintGraph()
            {
                string res = "";
                foreach (var ad in adjacencyList)
                {
                    var lastPair = adjacencyList.Last();
                    res += ($"{ad.Key}:");//Console.Write(ad.Key + ": ");
                    foreach (var adk in ad.Value)
                    {
                        if (Weight == true)
                        {
                            res += " "+ " [ " + adk.Value + "]" + ";";
                            //Console.Write(adk.Key + " [ " + adk.Value + " ]" + "; " );
                        }
                        else
                        {
                            res += " "+ adk.Key + ";";
                            //Console.Write(adk.Key + "; ");
                        }
                    }
                    if(ad.Key != lastPair.Key)
                    {
                        res += "\n";
                    }
                    
                    //Console.WriteLine();
                    
                }
                Console.WriteLine(res);
            }
        }

        static void Main()
        {

            var path = @"D:\CopyGraf_1.txt";   /* @"D:\ИСП-41\Graf_4.txt";*/ /*@"D:\ИСП-41\Graf_3.txt";*/  /*@"D:\ИСП-41\Graf_2.txt";*/ /*@"D:\ИСП-41\Graf_1.txt";*/
            Graf graf = new Graf(path);
            bool flag = true;
            do
            {
                Console.WriteLine("____________________");
                Console.WriteLine("Введите цифру для:");
                Console.WriteLine("Вывести граф------1");
                Console.WriteLine("Добавить вершину--2");
                Console.WriteLine("Добавить ребро----3");
                Console.WriteLine("Удалить вершину---4");
                Console.WriteLine("Удалить ребро-----5");
                Console.WriteLine("Сохранить граф----6");
                Console.WriteLine("Завершить---------7");
                Console.WriteLine("____________________");

                int a;
                int.TryParse(Console.ReadLine(), out a);
                switch (a)
                {
                    case 1:
                        graf.PrintGraph();
                        break;
                    case 2:
                        Console.WriteLine("Введите вершину: ");
                        graf.AddVert(int.Parse(Console.ReadLine()));
                        break;
                    case 3:
                        Console.WriteLine("Введите вершину №1: ");
                        int u = int.Parse(Console.ReadLine());
                        Console.WriteLine("Введите вершину №2:");
                        int v = int.Parse(Console.ReadLine());
                        Console.WriteLine("Введите вес, если необходимо (иначе Enter):");
                        int w;
                        int.TryParse(Console.ReadLine(), out w);
                        graf.AddEdge(u, v, w);
                        break;
                    case 4:
                        Console.WriteLine("Введите вершину:");
                        graf.RemoveVertix(int.Parse(Console.ReadLine()));
                        break;
                    case 5:
                        Console.WriteLine("Введите вершину №1:");
                        int u1 = int.Parse(Console.ReadLine());
                        Console.WriteLine("Введите вершину №2:");
                        int v1 = int.Parse(Console.ReadLine());
                        graf.RemoveEgde(u1, v1);
                        break;
                    case 6:
                        graf.SaveGraf(path);
                        break;
                    case 7:
                        flag = false;
                        break;
                    default:
                        Console.WriteLine("Ошибка. Неверно введена команда");
                        break;
                }

            } while (flag == true);

        }

    }
}
