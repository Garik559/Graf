using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Numerics;
using System.Reflection.PortableExecutable;
 
namespace Graf
{
    class Program
    {
 
        class Graf
        {
            private Dictionary<int, Dictionary<int, int?>> adjacencyList = new();
            private readonly bool Orient, Weight;
 
            private bool Circle;
            // конструтор по умолчанию
            public Graf()
            {
                Orient = false;
                Weight = false;
                adjacencyList = new Dictionary<int, Dictionary<int, int?>>();
            }
 
            public Graf(bool o, bool w)
            {
                Orient = o;
                Weight = w;
                adjacencyList = new Dictionary<int, Dictionary<int, int?>>();
            }
 
            // конструктор
            public Graf(string path)
            {
                string[] st = File.ReadAllLines(path);
                Orient = bool.Parse(st[0].Split("; ")[0]);
                Weight = bool.Parse(st[0].Split("; ")[1]);
 
                for (int i = 1; i < st.Length; i++)
                {
                    AddVert(int.Parse(st[i].Split(':')[0]));
                }
 
                for (int i = 1; i < st.Length; i++)
                {
                    for (int j = 0; j < (st[i].Split(": ").Count() > 1 ? (st[i].Split(": ")[1].Split("; ")).Count() : 0); j++)
                    {
                        AddEdge((int.Parse(st[i].Split(": ")[0])), int.Parse(st[i].Split(": ")[1].Split("; ")[j].Split(" ")[0]), int.Parse(st[i].Split(": ")[1].Split("; ")[j].Split(" ")[1]));
                    }
 
                }
            }
 
            // конструктор копирования
            public Graf(Graf graf)
            {
                Orient = graf.Orient;
                Weight = graf.Weight;
                adjacencyList = new Dictionary<int, Dictionary<int, int?>>(graf.adjacencyList);
                foreach (var i in adjacencyList.Keys)
                {
                    adjacencyList[i] = new Dictionary<int, int?>(graf.adjacencyList[i]);
                }
 
            }
 
            // добавление вершины
            public void AddVert(int u)
            {
                if (!adjacencyList.ContainsKey(u))
                {
                    adjacencyList.Add(u, new Dictionary<int, int?>());
                }
                else
                {
                    Console.WriteLine("Данная вершина существует");
                }
 
            }
 
            // сохранение графа в файл
            public void SaveGraf(string path)
            {
                string res = "";
                if (Weight)
                {
                    res += Orient.ToString() + "; ";
                    res += Weight.ToString() + "\n";
                    var listPair = adjacencyList.Last();
                    foreach (var k in adjacencyList.Keys)
                    {
                        res += k + ":";
                        foreach (var k1 in adjacencyList[k])
                        {
                            var lastPair2 = adjacencyList[k].Last();
                            if ((k1.Key == lastPair2.Key) && (k1.Value == lastPair2.Value))
                            {
                                res += " " + k1.Key + " " + k1.Value;
                            }
                            else
                            {
                                res += " " + k1.Key + " " + k1.Value + ";";
                            }
                        }
                        if (k != listPair.Key)
                        {
                            res += "\n";
                        }
                        File.WriteAllText(path, res);
                    }
                }
                else
                {
                    res += Orient.ToString() + "; ";
                    res += Weight.ToString() + "\n";
                    var listPair = adjacencyList.Last();
                    foreach (var k in adjacencyList.Keys)
                    {
                        res += k + ":";
                        foreach (var k1 in adjacencyList[k])
                        {
                            var lastPair2 = adjacencyList[k].Last();
                            if ((k1.Key == lastPair2.Key) && (k1.Value == lastPair2.Value))
                            {
                                res += " " + k1.Key + " " + 0;
                            }
                            else
                            {
                                res += " " + k1.Key + " " + 0 + ";";
                            }
                        }
                        if (k != listPair.Key)
                        {
                            res += "\n";
                        }
 
                    }
                    File.WriteAllText(path, res);
                }
            }
 
            // добавление ребра 
            public bool AddEdge(int u, int v, int? w)
            {
                if (adjacencyList.ContainsKey(u) && adjacencyList.ContainsKey(v))
                {
                    if (Weight)
                    {
 
                        if (Orient)
                        {
                            adjacencyList[u][v] = w;
                            return true;
                        }
                        else
                        {
                            adjacencyList[u][v] = w;
                            adjacencyList[v][u] = w;
                            return true;
                        }
                    }
                    else
                    {
 
                        if (Orient)
                        {
                            adjacencyList[u][v] = null;
                            return true;
                        }
                        else
                        {
                            adjacencyList[u][v] = null;
                            adjacencyList[v][u] = null;
                            return true;
                        }
                    }
 
                }
                else
                {
                    Console.WriteLine("Не возможно добавить ребро к несуществующим вершинам");
                }
                return false;
            }
 
            //удаление ребра
            public void RemoveEgde(int u, int v)
            {
                if (adjacencyList.ContainsKey(u) && adjacencyList.ContainsKey(v))
                {
                    if (!Orient)
                    {
                        adjacencyList[u].Remove(v);
                    }
                    else
                    {
                        adjacencyList[u].Remove(v);
                        adjacencyList[v].Remove(u);
                    }
 
                }
                else
                {
                    Console.WriteLine("Не возможно удалить несуществующие ребро");
                }
            }
 
            //удаление вершины
            public void RemoveVertix(int u)
            {
                if (adjacencyList.ContainsKey(u))
                {
                    adjacencyList.Remove(u);
                    foreach (var v in adjacencyList)
                    {
                        foreach (var v2 in v.Value)
                        {
                            if (v2.Key == u)
                            {
                                adjacencyList[v.Key].Remove(v2.Key);
                            }
 
                        }
                    }
                }
                else
                {
                    Console.WriteLine("Не возможно удалить не существующую вершину");
                }
 
            }
 
            // полный граф
            public static void BoldGraf(Graf graf)
            {
 
                foreach (var k in graf.adjacencyList)
                {
                    foreach (var l in graf.adjacencyList)
                    {
                        if (k.Key != l.Key)
                        {
                            if (!k.Value.ContainsKey(l.Key))
                            {
                                if (!graf.Weight)
                                {
                                    graf.AddEdge(k.Key, l.Key, 0);
                                }
                                else
                                {
                                    graf.AddEdge(k.Key, l.Key, 1);
                                }
                            }
                        }
                    }
                }
            }
 
            // дополнение графа
            public static void DopGraf(Graf graf)
            {
                foreach (var k in graf.adjacencyList)
                {
                    foreach (var l in graf.adjacencyList)
                    {
                        if (k.Key != l.Key)
                        {
                            if (!k.Value.ContainsKey(l.Key))
                            {
                                if (!graf.Weight)
                                {
                                    graf.AddEdge(k.Key, l.Key, 0);
                                }
                                else
                                {
                                    graf.AddEdge(k.Key, l.Key, 1);
                                }
                            }
                            else
                            {
                                k.Value.Remove(l.Key);
                            }
                        }
                    }
                }
            }
 
            // объединение графов
            public static bool EnjoiGraf(Graf graf1, Graf graf2, out Graf gr)
            {
                gr = new Graf(graf1.Orient, graf1.Weight);
 
                if (graf1.Orient != graf2.Orient || graf1.Weight != graf2.Weight)
                    return false;
 
                foreach (var k in graf1.adjacencyList)
                    if (graf2.adjacencyList.ContainsKey(k.Key)) return false;
 
                foreach (var k in graf1.adjacencyList)
                    gr.adjacencyList.Add(k.Key, k.Value);
 
                foreach (var k in graf2.adjacencyList)
                    gr.adjacencyList.Add(k.Key, k.Value);
 
                return true;
 
            }
 
            //Соединение графов
            public static bool ConnectGraf(Graf graf1, Graf graf2, out Graf gr)
            {
                gr = new Graf(graf1.Orient, graf1.Weight);
                bool TF = Graf.EnjoiGraf(graf1, graf2, out gr);
                if (TF == false)
                {
                    Console.WriteLine("Не удалось выполнить операцию");
                    return TF;
                }
                if (gr.Weight)
                {
                    foreach (var k in graf1.adjacencyList)
                    {
                        foreach (var k1 in graf2.adjacencyList)
                        {
                            gr.AddEdge(k.Key, k1.Key, 1);
                        }
                    }
                }
                else
                {
                    foreach (var k in graf1.adjacencyList)
                    {
                        foreach (var k1 in graf2.adjacencyList)
                        {
                            gr.AddEdge(k.Key, k1.Key, null);
                        }
                    }
                }
 
                return true;
            }
 
            // обход по ширине
            public void BFS(int start, List<int> visited)
            {
                Queue<int> queue = new Queue<int>();
                visited.Add(start);
                queue.Enqueue(start);
 
                while (queue.Count != 0)
                {
                    start = queue.Dequeue();
                    foreach (var k in adjacencyList[start])
                    {
                        if (!visited.Contains(k.Key))
                        {
                            visited.Add(k.Key);
                            queue.Enqueue(k.Key);
                        }
                    }
                }
            }
 
            // количество сильно связных компонентов
            public int CountConnectedComponents()
            {
                int count = 0;
                List<int> vert = new List<int>();
 
                List<int> visited = new List<int>();
 
                foreach (int i in adjacencyList.Keys)
                {
                    vert.Add(i);
                }
 
                while (vert.Count > 0)
                {
                    BFS(vert[0], visited);
                    for (int i = 0; i < visited.Count; i++)
                    {
                        vert.Remove(visited[i]);
                    }
                    count++;
                }
                return count;
            }
 
            // обход в глубину
            public void DFS(int start, Dictionary<int, int> visited, int from)
            {
                visited[start] = 1;
 
                foreach (var k in adjacencyList[start])
                {
                    if(k.Key == from)
                    {
                        continue;
                    }
                    else if (visited[k.Key] == 0)
                    {
                        DFS(k.Key, visited, start);
                    }
                    else if (visited[k.Key] == 1)
                    {
                        Circle = true;
                        return;
                    }
                }
 
                visited[start] = 2;
            }
 
            // определение цикличности
            public bool TypeGraf()
            {
                Dictionary<int, int> visited = new Dictionary<int, int>();
                
                
                foreach (int i in adjacencyList.Keys)
                {
                    visited.Add(i, 0);
                }
 
             
                foreach (var i in visited)
                {
                    
                    if (i.Value == 0)
                    {
                        DFS(i.Key, visited, -1);
 
                        if (Circle)
                        {
                            return Circle;
                        }
                    }
                    
                }
                return Circle;
            }
 
            public void Kraskal()
            {
 
            }
 
 
            public void PrintGraph()
            {
                string res = "";
                foreach (var ad in adjacencyList)
                {
                    var lastPair = adjacencyList.Last();
                    res += ($"{ad.Key}:");
                    foreach (var adk in ad.Value)
                    {
                        if (Weight == true)
                        {
                            res += " " + adk.Key + " " + "[" + adk.Value + "]" + ";";
                        }
                        else
                        {
                            res += " " + adk.Key + ";";
                        }
                    }
                    if (ad.Key != lastPair.Key)
                    {
                        res += "\n";
                    }
                }
                Console.WriteLine(res);
            }
        }
 
        static void Main()
        {
 
            var path = @"D:\ИСП-41\Test.txt";    /*@"D:\ИСП-41\Graf_4.txt";*/ /*@"D:\Graf_3.txt";*/  /*@"D:\ИСП-41\Graf_2.txt";*/ /*@"D:\ИСП-41\Graf_1.txt";*/
            var path2 = @"D:\ИСП-41\Test_2.txt";
            Graf graf = new Graf(path);
 
            bool flag = true;
            do
            {
                Console.WriteLine("__________________________________");
                Console.WriteLine("Введите цифру для:");
                Console.WriteLine("Вывести граф--------------------1");
                Console.WriteLine("Добавить вершину----------------2");
                Console.WriteLine("Добавить ребро------------------3");
                Console.WriteLine("Удалить вершину-----------------4");
                Console.WriteLine("Удалить ребро-------------------5");
                Console.WriteLine("Сохранить граф------------------6");
                Console.WriteLine("Создать полный граф-------------7");
                Console.WriteLine("Создать дополнительный граф-----8");
                Console.WriteLine("объеденить граф-----------------9");
                Console.WriteLine("Создать соединение графов-------10");
                Console.WriteLine("Количество сильных компонентов--11");
                Console.WriteLine("Завершить-----------------------12");
                Console.WriteLine("__________________________________");
 
                int a;
                int.TryParse(Console.ReadLine(), out a);
                switch (a)
                {
                    case 1:
                        graf.PrintGraph();
                        break;
                    case 2:
                        Console.WriteLine("Введите вершину: ");
                        graf.AddVert(int.Parse(Console.ReadLine()));
                        break;
                    case 3:
                        Console.WriteLine("Введите вершину №1: ");
                        int u = int.Parse(Console.ReadLine());
                        Console.WriteLine("Введите вершину №2:");
                        int v = int.Parse(Console.ReadLine());
                        Console.WriteLine("Введите вес, если необходимо (иначе Enter):");
                        int w;
                        int.TryParse(Console.ReadLine(), out w);
                        graf.AddEdge(u, v, w);
                        break;
                    case 4:
                        Console.WriteLine("Введите вершину:");
                        graf.RemoveVertix(int.Parse(Console.ReadLine()));
                        break;
                    case 5:
                        Console.WriteLine("Введите вершину №1:");
                        int u1 = int.Parse(Console.ReadLine());
                        Console.WriteLine("Введите вершину №2:");
                        int v1 = int.Parse(Console.ReadLine());
                        graf.RemoveEgde(u1, v1);
                        break;
                    case 6:
                        graf.SaveGraf(path);
                        break;
                    case 7:
                        Graf.BoldGraf(graf);
                        break;
                    case 8:
                        Graf.DopGraf(graf);
                        break;
                    case 9:
                        Graf.EnjoiGraf(new Graf(path), new Graf(path2), out graf);
                        break;
                    case 10:
                        Graf.ConnectGraf(new Graf(path), new Graf(path2), out graf);
                        break;
                    case 11:
                        Console.WriteLine("Количество сильно связанных компонентов: " + graf.CountConnectedComponents());
                        break;
                    case 12:
                        if (!graf.TypeGraf() && graf.CountConnectedComponents() > 1)
                        {
                            Console.WriteLine("Граф является лесом");
                        }
                        else if (!graf.TypeGraf() && graf.CountConnectedComponents() == 1)
                        {
                            Console.WriteLine("Граф является деревом");
                        }
                        else Console.WriteLine("Граф не является лесом и не является деревом");
                        break;
                    case 13:
                        flag = false;
                        break;
 
                    default:
                        Console.WriteLine("Ошибка. Неверно введена команда");
                        break;
                }
 
            } while (flag == true);
 
        }
 
    }
}
